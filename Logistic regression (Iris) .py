{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPgd/4iU/o65PCt242R2DYZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BloZNZICqdJT","executionInfo":{"status":"ok","timestamp":1732544300387,"user_tz":-330,"elapsed":508,"user":{"displayName":"abhay pratap","userId":"00287030112181465244"}},"outputId":"6c07df35-f215-46f4-da76-da35457bd6f8"},"outputs":[{"output_type":"stream","name":"stdout","text":["<bound method NDFrame.head of       Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n","0      1            5.1           3.5            1.4           0.2   \n","1      2            4.9           3.0            1.4           0.2   \n","2      3            4.7           3.2            1.3           0.2   \n","3      4            4.6           3.1            1.5           0.2   \n","4      5            5.0           3.6            1.4           0.2   \n","..   ...            ...           ...            ...           ...   \n","145  146            6.7           3.0            5.2           2.3   \n","146  147            6.3           2.5            5.0           1.9   \n","147  148            6.5           3.0            5.2           2.0   \n","148  149            6.2           3.4            5.4           2.3   \n","149  150            5.9           3.0            5.1           1.8   \n","\n","            Species  \n","0       Iris-setosa  \n","1       Iris-setosa  \n","2       Iris-setosa  \n","3       Iris-setosa  \n","4       Iris-setosa  \n","..              ...  \n","145  Iris-virginica  \n","146  Iris-virginica  \n","147  Iris-virginica  \n","148  Iris-virginica  \n","149  Iris-virginica  \n","\n","[150 rows x 6 columns]>\n","[[  1.    5.1   3.5   1.4   3.5]\n"," [  2.    4.9   3.    1.4   3. ]\n"," [  3.    4.7   3.2   1.3   3.2]\n"," [  4.    4.6   3.1   1.5   3.1]\n"," [  5.    5.    3.6   1.4   3.6]\n"," [  6.    5.4   3.9   1.7   3.9]\n"," [  7.    4.6   3.4   1.4   3.4]\n"," [  8.    5.    3.4   1.5   3.4]\n"," [  9.    4.4   2.9   1.4   2.9]\n"," [ 10.    4.9   3.1   1.5   3.1]\n"," [ 11.    5.4   3.7   1.5   3.7]\n"," [ 12.    4.8   3.4   1.6   3.4]\n"," [ 13.    4.8   3.    1.4   3. ]\n"," [ 14.    4.3   3.    1.1   3. ]\n"," [ 15.    5.8   4.    1.2   4. ]\n"," [ 16.    5.7   4.4   1.5   4.4]\n"," [ 17.    5.4   3.9   1.3   3.9]\n"," [ 18.    5.1   3.5   1.4   3.5]\n"," [ 19.    5.7   3.8   1.7   3.8]\n"," [ 20.    5.1   3.8   1.5   3.8]\n"," [ 21.    5.4   3.4   1.7   3.4]\n"," [ 22.    5.1   3.7   1.5   3.7]\n"," [ 23.    4.6   3.6   1.    3.6]\n"," [ 24.    5.1   3.3   1.7   3.3]\n"," [ 25.    4.8   3.4   1.9   3.4]\n"," [ 26.    5.    3.    1.6   3. ]\n"," [ 27.    5.    3.4   1.6   3.4]\n"," [ 28.    5.2   3.5   1.5   3.5]\n"," [ 29.    5.2   3.4   1.4   3.4]\n"," [ 30.    4.7   3.2   1.6   3.2]\n"," [ 31.    4.8   3.1   1.6   3.1]\n"," [ 32.    5.4   3.4   1.5   3.4]\n"," [ 33.    5.2   4.1   1.5   4.1]\n"," [ 34.    5.5   4.2   1.4   4.2]\n"," [ 35.    4.9   3.1   1.5   3.1]\n"," [ 36.    5.    3.2   1.2   3.2]\n"," [ 37.    5.5   3.5   1.3   3.5]\n"," [ 38.    4.9   3.1   1.5   3.1]\n"," [ 39.    4.4   3.    1.3   3. ]\n"," [ 40.    5.1   3.4   1.5   3.4]\n"," [ 41.    5.    3.5   1.3   3.5]\n"," [ 42.    4.5   2.3   1.3   2.3]\n"," [ 43.    4.4   3.2   1.3   3.2]\n"," [ 44.    5.    3.5   1.6   3.5]\n"," [ 45.    5.1   3.8   1.9   3.8]\n"," [ 46.    4.8   3.    1.4   3. ]\n"," [ 47.    5.1   3.8   1.6   3.8]\n"," [ 48.    4.6   3.2   1.4   3.2]\n"," [ 49.    5.3   3.7   1.5   3.7]\n"," [ 50.    5.    3.3   1.4   3.3]\n"," [ 51.    7.    3.2   4.7   3.2]\n"," [ 52.    6.4   3.2   4.5   3.2]\n"," [ 53.    6.9   3.1   4.9   3.1]\n"," [ 54.    5.5   2.3   4.    2.3]\n"," [ 55.    6.5   2.8   4.6   2.8]\n"," [ 56.    5.7   2.8   4.5   2.8]\n"," [ 57.    6.3   3.3   4.7   3.3]\n"," [ 58.    4.9   2.4   3.3   2.4]\n"," [ 59.    6.6   2.9   4.6   2.9]\n"," [ 60.    5.2   2.7   3.9   2.7]\n"," [ 61.    5.    2.    3.5   2. ]\n"," [ 62.    5.9   3.    4.2   3. ]\n"," [ 63.    6.    2.2   4.    2.2]\n"," [ 64.    6.1   2.9   4.7   2.9]\n"," [ 65.    5.6   2.9   3.6   2.9]\n"," [ 66.    6.7   3.1   4.4   3.1]\n"," [ 67.    5.6   3.    4.5   3. ]\n"," [ 68.    5.8   2.7   4.1   2.7]\n"," [ 69.    6.2   2.2   4.5   2.2]\n"," [ 70.    5.6   2.5   3.9   2.5]\n"," [ 71.    5.9   3.2   4.8   3.2]\n"," [ 72.    6.1   2.8   4.    2.8]\n"," [ 73.    6.3   2.5   4.9   2.5]\n"," [ 74.    6.1   2.8   4.7   2.8]\n"," [ 75.    6.4   2.9   4.3   2.9]\n"," [ 76.    6.6   3.    4.4   3. ]\n"," [ 77.    6.8   2.8   4.8   2.8]\n"," [ 78.    6.7   3.    5.    3. ]\n"," [ 79.    6.    2.9   4.5   2.9]\n"," [ 80.    5.7   2.6   3.5   2.6]\n"," [ 81.    5.5   2.4   3.8   2.4]\n"," [ 82.    5.5   2.4   3.7   2.4]\n"," [ 83.    5.8   2.7   3.9   2.7]\n"," [ 84.    6.    2.7   5.1   2.7]\n"," [ 85.    5.4   3.    4.5   3. ]\n"," [ 86.    6.    3.4   4.5   3.4]\n"," [ 87.    6.7   3.1   4.7   3.1]\n"," [ 88.    6.3   2.3   4.4   2.3]\n"," [ 89.    5.6   3.    4.1   3. ]\n"," [ 90.    5.5   2.5   4.    2.5]\n"," [ 91.    5.5   2.6   4.4   2.6]\n"," [ 92.    6.1   3.    4.6   3. ]\n"," [ 93.    5.8   2.6   4.    2.6]\n"," [ 94.    5.    2.3   3.3   2.3]\n"," [ 95.    5.6   2.7   4.2   2.7]\n"," [ 96.    5.7   3.    4.2   3. ]\n"," [ 97.    5.7   2.9   4.2   2.9]\n"," [ 98.    6.2   2.9   4.3   2.9]\n"," [ 99.    5.1   2.5   3.    2.5]\n"," [100.    5.7   2.8   4.1   2.8]\n"," [101.    6.3   3.3   6.    3.3]\n"," [102.    5.8   2.7   5.1   2.7]\n"," [103.    7.1   3.    5.9   3. ]\n"," [104.    6.3   2.9   5.6   2.9]\n"," [105.    6.5   3.    5.8   3. ]\n"," [106.    7.6   3.    6.6   3. ]\n"," [107.    4.9   2.5   4.5   2.5]\n"," [108.    7.3   2.9   6.3   2.9]\n"," [109.    6.7   2.5   5.8   2.5]\n"," [110.    7.2   3.6   6.1   3.6]\n"," [111.    6.5   3.2   5.1   3.2]\n"," [112.    6.4   2.7   5.3   2.7]\n"," [113.    6.8   3.    5.5   3. ]\n"," [114.    5.7   2.5   5.    2.5]\n"," [115.    5.8   2.8   5.1   2.8]\n"," [116.    6.4   3.2   5.3   3.2]\n"," [117.    6.5   3.    5.5   3. ]\n"," [118.    7.7   3.8   6.7   3.8]\n"," [119.    7.7   2.6   6.9   2.6]\n"," [120.    6.    2.2   5.    2.2]\n"," [121.    6.9   3.2   5.7   3.2]\n"," [122.    5.6   2.8   4.9   2.8]\n"," [123.    7.7   2.8   6.7   2.8]\n"," [124.    6.3   2.7   4.9   2.7]\n"," [125.    6.7   3.3   5.7   3.3]\n"," [126.    7.2   3.2   6.    3.2]\n"," [127.    6.2   2.8   4.8   2.8]\n"," [128.    6.1   3.    4.9   3. ]\n"," [129.    6.4   2.8   5.6   2.8]\n"," [130.    7.2   3.    5.8   3. ]\n"," [131.    7.4   2.8   6.1   2.8]\n"," [132.    7.9   3.8   6.4   3.8]\n"," [133.    6.4   2.8   5.6   2.8]\n"," [134.    6.3   2.8   5.1   2.8]\n"," [135.    6.1   2.6   5.6   2.6]\n"," [136.    7.7   3.    6.1   3. ]\n"," [137.    6.3   3.4   5.6   3.4]\n"," [138.    6.4   3.1   5.5   3.1]\n"," [139.    6.    3.    4.8   3. ]\n"," [140.    6.9   3.1   5.4   3.1]\n"," [141.    6.7   3.1   5.6   3.1]\n"," [142.    6.9   3.1   5.1   3.1]\n"," [143.    5.8   2.7   5.1   2.7]\n"," [144.    6.8   3.2   5.9   3.2]\n"," [145.    6.7   3.3   5.7   3.3]\n"," [146.    6.7   3.    5.2   3. ]\n"," [147.    6.3   2.5   5.    2.5]\n"," [148.    6.5   3.    5.2   3. ]\n"," [149.    6.2   3.4   5.4   3.4]\n"," [150.    5.9   3.    5.1   3. ]]\n","[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n","[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0]\n","Accuracy: 1.0\n","Precision: 1.0\n","Recall: 1.0\n","F1 score: 1.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}],"source":["import pandas as pd\n","new = pd.read_csv(\"/content/Iris.csv\")\n","print(new.head)\n","\n","from sklearn.preprocessing import LabelEncoder\n","le = LabelEncoder()\n","new['Species'] = le.fit_transform(new['Species'])\n","x = new[['Id','SepalLengthCm','SepalWidthCm','PetalLengthCm','SepalWidthCm']].values\n","y = new['Species'].values\n","print(x)\n","print(y)\n","\n","from sklearn.model_selection import train_test_split\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=0)\n","\n","from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression()\n","model.fit(x_train,y_train)\n","y_pred = model.predict(x_test)\n","print(y_pred)\n","\n","from sklearn.metrics import accuracy_score\n","print(\"Accuracy:\",accuracy_score(y_test,y_pred))\n","\n","from sklearn.metrics import precision_score\n","print(\"Precision:\",precision_score(y_test,y_pred,average='weighted'))\n","\n","from sklearn.metrics import recall_score\n","print(\"Recall:\",recall_score(y_test,y_pred,average='weighted'))\n","\n","from sklearn.metrics import f1_score\n","print(\"F1 score:\",f1_score(y_test,y_pred,average='weighted'))"]}]}